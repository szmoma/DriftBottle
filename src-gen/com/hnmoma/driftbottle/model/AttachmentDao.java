package com.hnmoma.driftbottle.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.hnmoma.driftbottle.model.Attachment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATTACHMENT.
*/
public class AttachmentDao extends AbstractDao<Attachment, Long> {

    public static final String TABLENAME = "ATTACHMENT";

    /**
     * Properties of entity Attachment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AttachmentType = new Property(1, Integer.class, "attachmentType", false, "ATTACHMENT_TYPE");
        public final static Property AttachmentUrl = new Property(2, String.class, "attachmentUrl", false, "ATTACHMENT_URL");
        public final static Property BottleIdPk = new Property(3, long.class, "bottleIdPk", false, "BOTTLE_ID_PK");
    };

    private Query<Attachment> bottle_BottleToAttachmentsQuery;

    public AttachmentDao(DaoConfig config) {
        super(config);
    }
    
    public AttachmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATTACHMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ATTACHMENT_TYPE' INTEGER," + // 1: attachmentType
                "'ATTACHMENT_URL' TEXT," + // 2: attachmentUrl
                "'BOTTLE_ID_PK' INTEGER NOT NULL );"); // 3: bottleIdPk
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATTACHMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Attachment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer attachmentType = entity.getAttachmentType();
        if (attachmentType != null) {
            stmt.bindLong(2, attachmentType);
        }
 
        String attachmentUrl = entity.getAttachmentUrl();
        if (attachmentUrl != null) {
            stmt.bindString(3, attachmentUrl);
        }
        stmt.bindLong(4, entity.getBottleIdPk());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Attachment readEntity(Cursor cursor, int offset) {
        Attachment entity = new Attachment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // attachmentType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attachmentUrl
            cursor.getLong(offset + 3) // bottleIdPk
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Attachment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAttachmentType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setAttachmentUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBottleIdPk(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Attachment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Attachment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "bottleToAttachments" to-many relationship of Bottle. */
    public List<Attachment> _queryBottle_BottleToAttachments(long bottleIdPk) {
        synchronized (this) {
            if (bottle_BottleToAttachmentsQuery == null) {
                QueryBuilder<Attachment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.BottleIdPk.eq(null));
                bottle_BottleToAttachmentsQuery = queryBuilder.build();
            }
        }
        Query<Attachment> query = bottle_BottleToAttachmentsQuery.forCurrentThread();
        query.setParameter(0, bottleIdPk);
        return query.list();
    }

}

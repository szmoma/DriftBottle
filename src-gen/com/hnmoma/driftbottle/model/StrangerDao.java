package com.hnmoma.driftbottle.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hnmoma.driftbottle.model.Stranger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STRANGER.
*/
public class StrangerDao extends AbstractDao<Stranger, String> {

    public static final String TABLENAME = "STRANGER";

    /**
     * Properties of entity Stranger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property Province = new Property(1, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property IdentityType = new Property(4, String.class, "identityType", false, "IDENTITY_TYPE");
        public final static Property Descript = new Property(5, String.class, "descript", false, "DESCRIPT");
        public final static Property HeadImg = new Property(6, String.class, "headImg", false, "HEAD_IMG");
        public final static Property UpdateTime = new Property(7, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
        public final static Property State = new Property(8, int.class, "state", false, "STATE");
        public final static Property IsVIP = new Property(9, int.class, "isVIP", false, "IS_VIP");
    };


    public StrangerDao(DaoConfig config) {
        super(config);
    }
    
    public StrangerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STRANGER' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "'PROVINCE' TEXT," + // 1: province
                "'CITY' TEXT," + // 2: city
                "'NICK_NAME' TEXT," + // 3: nickName
                "'IDENTITY_TYPE' TEXT," + // 4: identityType
                "'DESCRIPT' TEXT," + // 5: descript
                "'HEAD_IMG' TEXT," + // 6: headImg
                "'UPDATE_TIME' INTEGER," + // 7: updateTime
                "'STATE' INTEGER NOT NULL ," + // 8: state
                "'IS_VIP' INTEGER NOT NULL );"); // 9: isVIP
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STRANGER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Stranger entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(2, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        String identityType = entity.getIdentityType();
        if (identityType != null) {
            stmt.bindString(5, identityType);
        }
 
        String descript = entity.getDescript();
        if (descript != null) {
            stmt.bindString(6, descript);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(7, headImg);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(8, updateTime.getTime());
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindLong(10, entity.getIsVIP());
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Stranger readEntity(Cursor cursor, int offset) {
        Stranger entity = new Stranger( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // province
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // identityType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // descript
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // headImg
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // updateTime
            cursor.getInt(offset + 8), // state
            cursor.getInt(offset + 9) // isVIP
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Stranger entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setProvince(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdentityType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescript(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHeadImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setState(cursor.getInt(offset + 8));
        entity.setIsVIP(cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Stranger entity, long rowId) {
        return entity.getUserId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Stranger entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

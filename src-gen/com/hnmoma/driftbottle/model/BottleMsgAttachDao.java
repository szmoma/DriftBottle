package com.hnmoma.driftbottle.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hnmoma.driftbottle.model.BottleMsgAttach;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOTTLE_MSG_ATTACH.
*/
public class BottleMsgAttachDao extends AbstractDao<BottleMsgAttach, Long> {

    public static final String TABLENAME = "BOTTLE_MSG_ATTACH";

    /**
     * Properties of entity BottleMsgAttach.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property LocalUrl = new Property(3, String.class, "localUrl", false, "LOCAL_URL");
        public final static Property RemoteUrl = new Property(4, String.class, "remoteUrl", false, "REMOTE_URL");
        public final static Property Lengh = new Property(5, Integer.class, "lengh", false, "LENGH");
        public final static Property ThumbUrl = new Property(6, String.class, "thumbUrl", false, "THUMB_URL");
        public final static Property Message = new Property(7, String.class, "message", false, "MESSAGE");
        public final static Property FileSize = new Property(8, Long.class, "fileSize", false, "FILE_SIZE");
        public final static Property Downloaded = new Property(9, Boolean.class, "downloaded", false, "DOWNLOADED");
        public final static Property UpdateTime = new Property(10, java.util.Date.class, "updateTime", false, "UPDATE_TIME");
    };


    public BottleMsgAttachDao(DaoConfig config) {
        super(config);
    }
    
    public BottleMsgAttachDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOTTLE_MSG_ATTACH' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MSG_ID' TEXT NOT NULL ," + // 1: msgId
                "'FILE_NAME' TEXT," + // 2: fileName
                "'LOCAL_URL' TEXT," + // 3: localUrl
                "'REMOTE_URL' TEXT," + // 4: remoteUrl
                "'LENGH' INTEGER," + // 5: lengh
                "'THUMB_URL' TEXT," + // 6: thumbUrl
                "'MESSAGE' TEXT," + // 7: message
                "'FILE_SIZE' INTEGER," + // 8: fileSize
                "'DOWNLOADED' INTEGER," + // 9: downloaded
                "'UPDATE_TIME' INTEGER);"); // 10: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOTTLE_MSG_ATTACH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BottleMsgAttach entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(3, fileName);
        }
 
        String localUrl = entity.getLocalUrl();
        if (localUrl != null) {
            stmt.bindString(4, localUrl);
        }
 
        String remoteUrl = entity.getRemoteUrl();
        if (remoteUrl != null) {
            stmt.bindString(5, remoteUrl);
        }
 
        Integer lengh = entity.getLengh();
        if (lengh != null) {
            stmt.bindLong(6, lengh);
        }
 
        String thumbUrl = entity.getThumbUrl();
        if (thumbUrl != null) {
            stmt.bindString(7, thumbUrl);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(8, message);
        }
 
        Long fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindLong(9, fileSize);
        }
 
        Boolean downloaded = entity.getDownloaded();
        if (downloaded != null) {
            stmt.bindLong(10, downloaded ? 1l: 0l);
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(11, updateTime.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BottleMsgAttach readEntity(Cursor cursor, int offset) {
        BottleMsgAttach entity = new BottleMsgAttach( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // msgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // localUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // remoteUrl
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // lengh
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // thumbUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // message
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // fileSize
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // downloaded
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BottleMsgAttach entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsgId(cursor.getString(offset + 1));
        entity.setFileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocalUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemoteUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLengh(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setThumbUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMessage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileSize(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDownloaded(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setUpdateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BottleMsgAttach entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BottleMsgAttach entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

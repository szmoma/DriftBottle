package com.hnmoma.driftbottle.model;

import java.util.List;
import com.hnmoma.driftbottle.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table BOTTLE.
 */
public class Bottle implements java.io.Serializable {

    private Long bottleIdPk;
    /** Not-null value. */
    private String ubId;
    /** Not-null value. */
    private String bottleId;
    private String content;
    /** Not-null value. */
    private String contentType;
    /** Not-null value. */
    private String bottleType;
    private String remark;
    /** Not-null value. */
    private String bottleSort;
    private int msgCount;
    private java.util.Date createTime;
    private java.util.Date generateTime;
    private Boolean hasAnswer;
    private int state;
    /** Not-null value. */
    private String userId;
    private String headImg;
    /** Not-null value. */
    private String nickName;
    private String identityType;
    private String descript;
    private String province;
    private String city;
    /** Not-null value. */
    private String belongto;
    private Boolean mngIsChecked;
    private String url;
    private String shortPic;
    private Integer picNum;
    private Integer isRedirect;
    private String redirectUrl;
    private String message;
    private String messageType;
    /** Not-null value. */
    private String recent_userId;
    private String recent_headImg;
    /** Not-null value. */
    private String recent_nickName;
    private String recent_identityType;
    private String recent_province;
    private String recent_city;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BottleDao myDao;

    private List<Chat> bottleToChats;
    private List<Attachment> bottleToAttachments;

    public Bottle() {
    }

    public Bottle(Long bottleIdPk) {
        this.bottleIdPk = bottleIdPk;
    }

    public Bottle(Long bottleIdPk, String ubId, String bottleId, String content, String contentType, String bottleType, String remark, String bottleSort, int msgCount, java.util.Date createTime, java.util.Date generateTime, Boolean hasAnswer, int state, String userId, String headImg, String nickName, String identityType, String descript, String province, String city, String belongto, Boolean mngIsChecked, String url, String shortPic, Integer picNum, Integer isRedirect, String redirectUrl, String message, String messageType, String recent_userId, String recent_headImg, String recent_nickName, String recent_identityType, String recent_province, String recent_city) {
        this.bottleIdPk = bottleIdPk;
        this.ubId = ubId;
        this.bottleId = bottleId;
        this.content = content;
        this.contentType = contentType;
        this.bottleType = bottleType;
        this.remark = remark;
        this.bottleSort = bottleSort;
        this.msgCount = msgCount;
        this.createTime = createTime;
        this.generateTime = generateTime;
        this.hasAnswer = hasAnswer;
        this.state = state;
        this.userId = userId;
        this.headImg = headImg;
        this.nickName = nickName;
        this.identityType = identityType;
        this.descript = descript;
        this.province = province;
        this.city = city;
        this.belongto = belongto;
        this.mngIsChecked = mngIsChecked;
        this.url = url;
        this.shortPic = shortPic;
        this.picNum = picNum;
        this.isRedirect = isRedirect;
        this.redirectUrl = redirectUrl;
        this.message = message;
        this.messageType = messageType;
        this.recent_userId = recent_userId;
        this.recent_headImg = recent_headImg;
        this.recent_nickName = recent_nickName;
        this.recent_identityType = recent_identityType;
        this.recent_province = recent_province;
        this.recent_city = recent_city;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBottleDao() : null;
    }

    public Long getBottleIdPk() {
        return bottleIdPk;
    }

    public void setBottleIdPk(Long bottleIdPk) {
        this.bottleIdPk = bottleIdPk;
    }

    /** Not-null value. */
    public String getUbId() {
        return ubId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUbId(String ubId) {
        this.ubId = ubId;
    }

    /** Not-null value. */
    public String getBottleId() {
        return bottleId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBottleId(String bottleId) {
        this.bottleId = bottleId;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    /** Not-null value. */
    public String getContentType() {
        return contentType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContentType(String contentType) {
        this.contentType = contentType;
    }

    /** Not-null value. */
    public String getBottleType() {
        return bottleType;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBottleType(String bottleType) {
        this.bottleType = bottleType;
    }

    public String getRemark() {
        return remark;
    }

    public void setRemark(String remark) {
        this.remark = remark;
    }

    /** Not-null value. */
    public String getBottleSort() {
        return bottleSort;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBottleSort(String bottleSort) {
        this.bottleSort = bottleSort;
    }

    public int getMsgCount() {
        return msgCount;
    }

    public void setMsgCount(int msgCount) {
        this.msgCount = msgCount;
    }

    public java.util.Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(java.util.Date createTime) {
        this.createTime = createTime;
    }

    public java.util.Date getGenerateTime() {
        return generateTime;
    }

    public void setGenerateTime(java.util.Date generateTime) {
        this.generateTime = generateTime;
    }

    public Boolean getHasAnswer() {
        return hasAnswer;
    }

    public void setHasAnswer(Boolean hasAnswer) {
        this.hasAnswer = hasAnswer;
    }

    public int getState() {
        return state;
    }

    public void setState(int state) {
        this.state = state;
    }

    /** Not-null value. */
    public String getUserId() {
        return userId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getHeadImg() {
        return headImg;
    }

    public void setHeadImg(String headImg) {
        this.headImg = headImg;
    }

    /** Not-null value. */
    public String getNickName() {
        return nickName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setNickName(String nickName) {
        this.nickName = nickName;
    }

    public String getIdentityType() {
        return identityType;
    }

    public void setIdentityType(String identityType) {
        this.identityType = identityType;
    }

    public String getDescript() {
        return descript;
    }

    public void setDescript(String descript) {
        this.descript = descript;
    }

    public String getProvince() {
        return province;
    }

    public void setProvince(String province) {
        this.province = province;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    /** Not-null value. */
    public String getBelongto() {
        return belongto;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setBelongto(String belongto) {
        this.belongto = belongto;
    }

    public Boolean getMngIsChecked() {
        return mngIsChecked;
    }

    public void setMngIsChecked(Boolean mngIsChecked) {
        this.mngIsChecked = mngIsChecked;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getShortPic() {
        return shortPic;
    }

    public void setShortPic(String shortPic) {
        this.shortPic = shortPic;
    }

    public Integer getPicNum() {
        return picNum;
    }

    public void setPicNum(Integer picNum) {
        this.picNum = picNum;
    }

    public Integer getIsRedirect() {
        return isRedirect;
    }

    public void setIsRedirect(Integer isRedirect) {
        this.isRedirect = isRedirect;
    }

    public String getRedirectUrl() {
        return redirectUrl;
    }

    public void setRedirectUrl(String redirectUrl) {
        this.redirectUrl = redirectUrl;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getMessageType() {
        return messageType;
    }

    public void setMessageType(String messageType) {
        this.messageType = messageType;
    }

    /** Not-null value. */
    public String getRecent_userId() {
        return recent_userId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRecent_userId(String recent_userId) {
        this.recent_userId = recent_userId;
    }

    public String getRecent_headImg() {
        return recent_headImg;
    }

    public void setRecent_headImg(String recent_headImg) {
        this.recent_headImg = recent_headImg;
    }

    /** Not-null value. */
    public String getRecent_nickName() {
        return recent_nickName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setRecent_nickName(String recent_nickName) {
        this.recent_nickName = recent_nickName;
    }

    public String getRecent_identityType() {
        return recent_identityType;
    }

    public void setRecent_identityType(String recent_identityType) {
        this.recent_identityType = recent_identityType;
    }

    public String getRecent_province() {
        return recent_province;
    }

    public void setRecent_province(String recent_province) {
        this.recent_province = recent_province;
    }

    public String getRecent_city() {
        return recent_city;
    }

    public void setRecent_city(String recent_city) {
        this.recent_city = recent_city;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Chat> getBottleToChats() {
        if (bottleToChats == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatDao targetDao = daoSession.getChatDao();
            List<Chat> bottleToChatsNew = targetDao._queryBottle_BottleToChats(bottleIdPk);
            synchronized (this) {
                if(bottleToChats == null) {
                    bottleToChats = bottleToChatsNew;
                }
            }
        }
        return bottleToChats;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBottleToChats() {
        bottleToChats = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Attachment> getBottleToAttachments() {
        if (bottleToAttachments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AttachmentDao targetDao = daoSession.getAttachmentDao();
            List<Attachment> bottleToAttachmentsNew = targetDao._queryBottle_BottleToAttachments(bottleIdPk);
            synchronized (this) {
                if(bottleToAttachments == null) {
                    bottleToAttachments = bottleToAttachmentsNew;
                }
            }
        }
        return bottleToAttachments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBottleToAttachments() {
        bottleToAttachments = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

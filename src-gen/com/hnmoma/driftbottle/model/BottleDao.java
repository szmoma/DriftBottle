package com.hnmoma.driftbottle.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hnmoma.driftbottle.model.Bottle;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BOTTLE.
*/
public class BottleDao extends AbstractDao<Bottle, Long> {

    public static final String TABLENAME = "BOTTLE";

    /**
     * Properties of entity Bottle.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BottleIdPk = new Property(0, Long.class, "bottleIdPk", true, "BOTTLE_ID_PK");
        public final static Property UbId = new Property(1, String.class, "ubId", false, "UB_ID");
        public final static Property BottleId = new Property(2, String.class, "bottleId", false, "BOTTLE_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property ContentType = new Property(4, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property BottleType = new Property(5, String.class, "bottleType", false, "BOTTLE_TYPE");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
        public final static Property BottleSort = new Property(7, String.class, "bottleSort", false, "BOTTLE_SORT");
        public final static Property MsgCount = new Property(8, int.class, "msgCount", false, "MSG_COUNT");
        public final static Property CreateTime = new Property(9, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property GenerateTime = new Property(10, java.util.Date.class, "generateTime", false, "GENERATE_TIME");
        public final static Property HasAnswer = new Property(11, Boolean.class, "hasAnswer", false, "HAS_ANSWER");
        public final static Property State = new Property(12, int.class, "state", false, "STATE");
        public final static Property UserId = new Property(13, String.class, "userId", false, "USER_ID");
        public final static Property HeadImg = new Property(14, String.class, "headImg", false, "HEAD_IMG");
        public final static Property NickName = new Property(15, String.class, "nickName", false, "NICK_NAME");
        public final static Property IdentityType = new Property(16, String.class, "identityType", false, "IDENTITY_TYPE");
        public final static Property Descript = new Property(17, String.class, "descript", false, "DESCRIPT");
        public final static Property Province = new Property(18, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(19, String.class, "city", false, "CITY");
        public final static Property Belongto = new Property(20, String.class, "belongto", false, "BELONGTO");
        public final static Property MngIsChecked = new Property(21, Boolean.class, "mngIsChecked", false, "MNG_IS_CHECKED");
        public final static Property Url = new Property(22, String.class, "url", false, "URL");
        public final static Property ShortPic = new Property(23, String.class, "shortPic", false, "SHORT_PIC");
        public final static Property PicNum = new Property(24, Integer.class, "picNum", false, "PIC_NUM");
        public final static Property IsRedirect = new Property(25, Integer.class, "isRedirect", false, "IS_REDIRECT");
        public final static Property RedirectUrl = new Property(26, String.class, "redirectUrl", false, "REDIRECT_URL");
        public final static Property Message = new Property(27, String.class, "message", false, "MESSAGE");
        public final static Property MessageType = new Property(28, String.class, "messageType", false, "MESSAGE_TYPE");
        public final static Property Recent_userId = new Property(29, String.class, "recent_userId", false, "RECENT_USER_ID");
        public final static Property Recent_headImg = new Property(30, String.class, "recent_headImg", false, "RECENT_HEAD_IMG");
        public final static Property Recent_nickName = new Property(31, String.class, "recent_nickName", false, "RECENT_NICK_NAME");
        public final static Property Recent_identityType = new Property(32, String.class, "recent_identityType", false, "RECENT_IDENTITY_TYPE");
        public final static Property Recent_province = new Property(33, String.class, "recent_province", false, "RECENT_PROVINCE");
        public final static Property Recent_city = new Property(34, String.class, "recent_city", false, "RECENT_CITY");
    };

    private DaoSession daoSession;


    public BottleDao(DaoConfig config) {
        super(config);
    }
    
    public BottleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BOTTLE' (" + //
                "'BOTTLE_ID_PK' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: bottleIdPk
                "'UB_ID' TEXT NOT NULL ," + // 1: ubId
                "'BOTTLE_ID' TEXT NOT NULL ," + // 2: bottleId
                "'CONTENT' TEXT," + // 3: content
                "'CONTENT_TYPE' TEXT NOT NULL ," + // 4: contentType
                "'BOTTLE_TYPE' TEXT NOT NULL ," + // 5: bottleType
                "'REMARK' TEXT," + // 6: remark
                "'BOTTLE_SORT' TEXT NOT NULL ," + // 7: bottleSort
                "'MSG_COUNT' INTEGER NOT NULL ," + // 8: msgCount
                "'CREATE_TIME' INTEGER," + // 9: createTime
                "'GENERATE_TIME' INTEGER," + // 10: generateTime
                "'HAS_ANSWER' INTEGER," + // 11: hasAnswer
                "'STATE' INTEGER NOT NULL ," + // 12: state
                "'USER_ID' TEXT NOT NULL ," + // 13: userId
                "'HEAD_IMG' TEXT," + // 14: headImg
                "'NICK_NAME' TEXT NOT NULL ," + // 15: nickName
                "'IDENTITY_TYPE' TEXT," + // 16: identityType
                "'DESCRIPT' TEXT," + // 17: descript
                "'PROVINCE' TEXT," + // 18: province
                "'CITY' TEXT," + // 19: city
                "'BELONGTO' TEXT NOT NULL ," + // 20: belongto
                "'MNG_IS_CHECKED' INTEGER," + // 21: mngIsChecked
                "'URL' TEXT," + // 22: url
                "'SHORT_PIC' TEXT," + // 23: shortPic
                "'PIC_NUM' INTEGER," + // 24: picNum
                "'IS_REDIRECT' INTEGER," + // 25: isRedirect
                "'REDIRECT_URL' TEXT," + // 26: redirectUrl
                "'MESSAGE' TEXT," + // 27: message
                "'MESSAGE_TYPE' TEXT," + // 28: messageType
                "'RECENT_USER_ID' TEXT NOT NULL ," + // 29: recent_userId
                "'RECENT_HEAD_IMG' TEXT," + // 30: recent_headImg
                "'RECENT_NICK_NAME' TEXT NOT NULL ," + // 31: recent_nickName
                "'RECENT_IDENTITY_TYPE' TEXT," + // 32: recent_identityType
                "'RECENT_PROVINCE' TEXT," + // 33: recent_province
                "'RECENT_CITY' TEXT);"); // 34: recent_city
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BOTTLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bottle entity) {
        stmt.clearBindings();
 
        Long bottleIdPk = entity.getBottleIdPk();
        if (bottleIdPk != null) {
            stmt.bindLong(1, bottleIdPk);
        }
        stmt.bindString(2, entity.getUbId());
        stmt.bindString(3, entity.getBottleId());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
        stmt.bindString(5, entity.getContentType());
        stmt.bindString(6, entity.getBottleType());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
        stmt.bindString(8, entity.getBottleSort());
        stmt.bindLong(9, entity.getMsgCount());
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(10, createTime.getTime());
        }
 
        java.util.Date generateTime = entity.getGenerateTime();
        if (generateTime != null) {
            stmt.bindLong(11, generateTime.getTime());
        }
 
        Boolean hasAnswer = entity.getHasAnswer();
        if (hasAnswer != null) {
            stmt.bindLong(12, hasAnswer ? 1l: 0l);
        }
        stmt.bindLong(13, entity.getState());
        stmt.bindString(14, entity.getUserId());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(15, headImg);
        }
        stmt.bindString(16, entity.getNickName());
 
        String identityType = entity.getIdentityType();
        if (identityType != null) {
            stmt.bindString(17, identityType);
        }
 
        String descript = entity.getDescript();
        if (descript != null) {
            stmt.bindString(18, descript);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(19, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(20, city);
        }
        stmt.bindString(21, entity.getBelongto());
 
        Boolean mngIsChecked = entity.getMngIsChecked();
        if (mngIsChecked != null) {
            stmt.bindLong(22, mngIsChecked ? 1l: 0l);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(23, url);
        }
 
        String shortPic = entity.getShortPic();
        if (shortPic != null) {
            stmt.bindString(24, shortPic);
        }
 
        Integer picNum = entity.getPicNum();
        if (picNum != null) {
            stmt.bindLong(25, picNum);
        }
 
        Integer isRedirect = entity.getIsRedirect();
        if (isRedirect != null) {
            stmt.bindLong(26, isRedirect);
        }
 
        String redirectUrl = entity.getRedirectUrl();
        if (redirectUrl != null) {
            stmt.bindString(27, redirectUrl);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(28, message);
        }
 
        String messageType = entity.getMessageType();
        if (messageType != null) {
            stmt.bindString(29, messageType);
        }
        stmt.bindString(30, entity.getRecent_userId());
 
        String recent_headImg = entity.getRecent_headImg();
        if (recent_headImg != null) {
            stmt.bindString(31, recent_headImg);
        }
        stmt.bindString(32, entity.getRecent_nickName());
 
        String recent_identityType = entity.getRecent_identityType();
        if (recent_identityType != null) {
            stmt.bindString(33, recent_identityType);
        }
 
        String recent_province = entity.getRecent_province();
        if (recent_province != null) {
            stmt.bindString(34, recent_province);
        }
 
        String recent_city = entity.getRecent_city();
        if (recent_city != null) {
            stmt.bindString(35, recent_city);
        }
    }

    @Override
    protected void attachEntity(Bottle entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bottle readEntity(Cursor cursor, int offset) {
        Bottle entity = new Bottle( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // bottleIdPk
            cursor.getString(offset + 1), // ubId
            cursor.getString(offset + 2), // bottleId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.getString(offset + 4), // contentType
            cursor.getString(offset + 5), // bottleType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // remark
            cursor.getString(offset + 7), // bottleSort
            cursor.getInt(offset + 8), // msgCount
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // createTime
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // generateTime
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // hasAnswer
            cursor.getInt(offset + 12), // state
            cursor.getString(offset + 13), // userId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // headImg
            cursor.getString(offset + 15), // nickName
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // identityType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // descript
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // province
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // city
            cursor.getString(offset + 20), // belongto
            cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0, // mngIsChecked
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // url
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // shortPic
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // picNum
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // isRedirect
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // redirectUrl
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // message
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // messageType
            cursor.getString(offset + 29), // recent_userId
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // recent_headImg
            cursor.getString(offset + 31), // recent_nickName
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // recent_identityType
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // recent_province
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34) // recent_city
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bottle entity, int offset) {
        entity.setBottleIdPk(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUbId(cursor.getString(offset + 1));
        entity.setBottleId(cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContentType(cursor.getString(offset + 4));
        entity.setBottleType(cursor.getString(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBottleSort(cursor.getString(offset + 7));
        entity.setMsgCount(cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setGenerateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setHasAnswer(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setState(cursor.getInt(offset + 12));
        entity.setUserId(cursor.getString(offset + 13));
        entity.setHeadImg(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setNickName(cursor.getString(offset + 15));
        entity.setIdentityType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDescript(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setProvince(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCity(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBelongto(cursor.getString(offset + 20));
        entity.setMngIsChecked(cursor.isNull(offset + 21) ? null : cursor.getShort(offset + 21) != 0);
        entity.setUrl(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setShortPic(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setPicNum(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIsRedirect(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setRedirectUrl(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMessage(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setMessageType(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRecent_userId(cursor.getString(offset + 29));
        entity.setRecent_headImg(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRecent_nickName(cursor.getString(offset + 31));
        entity.setRecent_identityType(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setRecent_province(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setRecent_city(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bottle entity, long rowId) {
        entity.setBottleIdPk(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bottle entity) {
        if(entity != null) {
            return entity.getBottleIdPk();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
